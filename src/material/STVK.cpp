/*
This file is part of Cubica.
 
Cubica is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Cubica is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Cubica.  If not, see <http://www.gnu.org/licenses/>.
*/
// STVK.cpp: implementation of the STVK class.
//
//////////////////////////////////////////////////////////////////////

#include <material/STVK.h>
#include <Eigen/SVD>
#include <util/MATRIX_UTIL.h>

//////////////////////////////////////////////////////////////////////
// Constructor for STVK
//////////////////////////////////////////////////////////////////////
STVK::STVK(Real lambda, Real mu) :
  _lambda(lambda), _mu(mu),
  // work array
  _pf_pF(12,9)
{
  _materialName.assign("STVK");
}

//////////////////////////////////////////////////////////////////////
// make a copy
//////////////////////////////////////////////////////////////////////
MATERIAL* STVK::copy()
{
  MATERIAL* material = new STVK(_lambda, _mu);
  return material;
}

//////////////////////////////////////////////////////////////////////
// stiffness matrix implementation
//
// The Matlab code to generate the code is below. This is the only
// material model where the derivative wrt u can be done explicitly.
// The other materials make Maple run out of memory, so the derivative
// wrt F must be taken chain rule with DF/Du used to convert it wrt u.
//
// see "MATERIAL.h" for more details
/*
 lam = sym('lam');
 mu = sym('mu');
 % pre-computed area vectors
 syms b00 b01 b02 b10 b11 b12 b20 b21 b22 b30 b31 b32;
 b = [ b00 b10 b20 b30
     b01 b11 b21 b31
     b02 b12 b22 b32 ];
 % output formulas for stiffness matrices, for a single tet
 a = sym('a'); w = sym('b'); c = sym('c');
 d = sym('d'); e = sym('e'); f = sym('f');
 g = sym('g'); h = sym('h'); i = sym('i');
 j = sym('j'); k = sym('k'); l = sym('l');
 m = sym('m'); n = sym('n'); o = sym('o');
 p = sym('p'); q = sym('q'); r = sym('r');
 s = sym('s'); t = sym('t'); v = sym('u');    
 n0 = [a w c];
 n1 = [d e f];
 n2 = [g h i];
 n3 = [j k l];
 u = mytrans([a w c d e f g h i j k l]);
 x = mytrans([
     n1-n0
     n2-n0
     n3-n0
     ]);
 Xinv = [
     m n o
     p q r
     s t v
     ];
 F = x * Xinv;
 C = mytrans(F)*F;
 I = eye(3);
 E = 0.5 * (C - I);
 S = lam*trace(E)*I + 2*mu*E;    % 2nd PK
 P = F * S;  % 1st PK
 forces = P * b; % 3x4
 forces = reshape(forces, 12, 1);
 % differentiate to get stiffness
 stiffness = mu * ones(12,12);
 for i = 1:12
     for j = 1:12
         stiffness(i,j) = diff( forces(i), u(j) );
     end
 end
 maple('codegen[C]', stiffness, 'optimized')
*/
//////////////////////////////////////////////////////////////////////
MATRIX STVK::stiffness(TET& tet)
{
  computeStresses(tet);
  tet.computePFPu();
  MATRIX product = _pf_pF * tet.PFPu();
  return product;
}
Real STVK::strainEnergy(const MATRIX3& F)
{
	MATRIX3 C = F.transpose() * F;

	// Green-Lagrange strain tensor
	MATRIX3 E = 0.5 * (C - MATRIX3::Identity());
	
	Real energy = 0.5 * _lambda * (trace(E) * trace(E)) + _mu * trace(E * E);
	
	return energy;
}
//////////////////////////////////////////////////////////////////////
// implementation of second PK stress tensor
//////////////////////////////////////////////////////////////////////
MATRIX3 STVK::secondPiolaKirchhoff(const MATRIX3& F)
{
	MATRIX3 C = F.transpose() * F;

	// Green-Lagrange strain tensor
	MATRIX3 E = 0.5 * (C - MATRIX3::Identity());

   // 2nd Piola-Kirchoff stress tensor
	MATRIX3 S = (_lambda * trace(E) * MATRIX3::Identity()) + (2 * _mu * E);	

	return S;
}

//////////////////////////////////////////////////////////////////////
// autogenerated as "stiffnessDensity" from:
//
// setup_symbols_wrt_F;
// syms lam mu;
// strain_energy = 0.5*lam*trace(E)^2 + mu*dblcon(E,E);
// [forceDensity stiffnessDensity] = codegen_density(strain_energy,F)
//
// see "MATERIAL.h" for more details
//////////////////////////////////////////////////////////////////////
void STVK::stiffnessDensity(const Real* F, Real* stiffness)
{
  const double lam = _lambda;
  const double mu = _mu;

  const double t1 = F[0]*F[0];
  const double t4 = F[1]*F[1];
  const double t6 = F[2]*F[2];
  const double t8 = F[3]*F[3];
  const double t10 = F[4]*F[4];
  const double t12 = F[5]*F[5];
  const double t14 = F[6]*F[6];
  const double t16 = F[7]*F[7];
  const double t18 = F[8]*F[8];
  const double t21 = lam*(t1/2.0+t4/2.0+t6/2.0-3.0/2.0+t8/2.0+t10/2.0+t12/2.0+t14/2.0+t16/2.0+t18/2.0);
  const double t28 = F[1]*F[0];
  const double t30 = F[4]*F[3];
  const double t31 = F[7]*F[6];
  const double t34 = -lam*F[1]*F[0]-mu*(2.0*t28+t30+t31);
  const double t35 = lam*F[2];
  const double t37 = F[2]*F[0];
  const double t39 = F[5]*F[3];
  const double t40 = F[8]*F[6];
  const double t43 = -t35*F[0]-mu*(2.0*t37+t39+t40);
  const double t44 = lam*F[3];
  const double t46 = F[0]*F[3];
  const double t48 = F[1]*F[4];
  const double t49 = F[2]*F[5];
  const double t52 = -t44*F[0]-mu*(2.0*t46+t48+t49);
  const double t53 = lam*F[4];
  const double t55 = mu*F[1];
  const double t57 = -t53*F[0]-t55*F[3];
  const double t58 = lam*F[5];
  const double t60 = mu*F[2];
  const double t62 = -t58*F[0]-t60*F[3];
  const double t63 = lam*F[6];
  const double t65 = F[0]*F[6];
  const double t67 = F[1]*F[7];
  const double t68 = F[2]*F[8];
  const double t71 = -t63*F[0]-mu*(2.0*t65+t67+t68);
  const double t72 = lam*F[7];
  const double t75 = -t72*F[0]-t55*F[6];
  const double t76 = lam*F[8];
  const double t79 = -t76*F[0]-t60*F[6];
  const double t86 = F[2]*F[1];
  const double t88 = F[5]*F[4];
  const double t89 = F[8]*F[7];
  const double t92 = -t35*F[1]-mu*(2.0*t86+t88+t89);
  const double t94 = mu*F[0];
  const double t96 = -t44*F[1]-t94*F[4];
  const double t101 = -t53*F[1]-mu*(2.0*t48+t46+t49);
  const double t104 = -t58*F[1]-t60*F[4];
  const double t107 = -t63*F[1]-t94*F[7];
  const double t112 = -t72*F[1]-mu*(2.0*t67+t65+t68);
  const double t115 = -t76*F[1]-t60*F[7];
  const double t123 = -t44*F[2]-t94*F[5];
  const double t126 = -t53*F[2]-t55*F[5];
  const double t131 = -t58*F[2]-mu*(2.0*t49+t46+t48);
  const double t134 = -t63*F[2]-t94*F[8];
  const double t137 = -t72*F[2]-t55*F[8];
  const double t142 = -t76*F[2]-mu*(2.0*t68+t65+t67);
  const double t152 = -t53*F[3]-mu*(t28+2.0*t30+t31);
  const double t157 = -t58*F[3]-mu*(t37+2.0*t39+t40);
  const double t159 = F[3]*F[6];
  const double t161 = F[4]*F[7];
  const double t162 = F[5]*F[8];
  const double t165 = -t63*F[3]-mu*(2.0*t159+t161+t162);
  const double t167 = mu*F[4];
  const double t169 = -t72*F[3]-t167*F[6];
  const double t171 = mu*F[5];
  const double t173 = -t76*F[3]-t171*F[6];
  const double t183 = -t58*F[4]-mu*(t86+2.0*t88+t89);
  const double t185 = mu*F[3];
  const double t187 = -t63*F[4]-t185*F[7];
  const double t192 = -t72*F[4]-mu*(2.0*t161+t159+t162);
  const double t195 = -t76*F[4]-t171*F[7];
  const double t203 = -t63*F[5]-t185*F[8];
  const double t206 = -t72*F[5]-t167*F[8];
  const double t211 = -t76*F[5]-mu*(2.0*t162+t159+t161);
  const double t221 = -t72*F[6]-mu*(t28+t30+2.0*t31);
  const double t226 = -t76*F[6]-mu*(t37+t39+2.0*t40);
  const double t236 = -t76*F[7]-mu*(t86+t88+2.0*t89);

  stiffness[0] = -lam*t1-t21-mu*(3.0*t1+t4+t6-1.0+t8+t14);
  stiffness[1] = t34;
  stiffness[2] = t43;
  stiffness[3] = t52;
  stiffness[4] = t57;
  stiffness[5] = t62;
  stiffness[6] = t71;
  stiffness[7] = t75;
  stiffness[8] = t79;
  stiffness[9] = t34;
  stiffness[10] = -lam*t4-t21-mu*(3.0*t4+t1+t6-1.0+t10+t16);
  stiffness[11] = t92;
  stiffness[12] = t96;
  stiffness[13] = t101;
  stiffness[14] = t104;
  stiffness[15] = t107;
  stiffness[16] = t112;
  stiffness[17] = t115;
  stiffness[18] = t43;
  stiffness[19] = t92;
  stiffness[20] = -lam*t6-t21-mu*(3.0*t6+t1+t4-1.0+t12+t18);
  stiffness[21] = t123;
  stiffness[22] = t126;
  stiffness[23] = t131;
  stiffness[24] = t134;
  stiffness[25] = t137;
  stiffness[26] = t142;
  stiffness[27] = t52;
  stiffness[28] = t96;
  stiffness[29] = t123;
  stiffness[30] = -lam*t8-t21-mu*(t1+3.0*t8+t10+t12-1.0+t14);
  stiffness[31] = t152;
  stiffness[32] = t157;
  stiffness[33] = t165;
  stiffness[34] = t169;
  stiffness[35] = t173;
  stiffness[36] = t57;
  stiffness[37] = t101;
  stiffness[38] = t126;
  stiffness[39] = t152;
  stiffness[40] = -lam*t10-t21-mu*(t4+3.0*t10+t8+t12-1.0+t16);
  stiffness[41] = t183;
  stiffness[42] = t187;
  stiffness[43] = t192;
  stiffness[44] = t195;
  stiffness[45] = t62;
  stiffness[46] = t104;
  stiffness[47] = t131;
  stiffness[48] = t157;
  stiffness[49] = t183;
  stiffness[50] = -lam*t12-t21-mu*(t6+3.0*t12+t8+t10-1.0+t18);
  stiffness[51] = t203;
  stiffness[52] = t206;
  stiffness[53] = t211;
  stiffness[54] = t71;
  stiffness[55] = t107;
  stiffness[56] = t134;
  stiffness[57] = t165;
  stiffness[58] = t187;
  stiffness[59] = t203;
  stiffness[60] = -lam*t14-t21-mu*(t1+t8+3.0*t14+t16+t18-1.0);
  stiffness[61] = t221;
  stiffness[62] = t226;
  stiffness[63] = t75;
  stiffness[64] = t112;
  stiffness[65] = t137;
  stiffness[66] = t169;
  stiffness[67] = t192;
  stiffness[68] = t206;
  stiffness[69] = t221;
  stiffness[70] = -lam*t16-t21-mu*(t4+t10+3.0*t16+t14+t18-1.0);
  stiffness[71] = t236;
  stiffness[72] = t79;
  stiffness[73] = t115;
  stiffness[74] = t142;
  stiffness[75] = t173;
  stiffness[76] = t195;
  stiffness[77] = t211;
  stiffness[78] = t226;
  stiffness[79] = t236;
  stiffness[80] = -lam*t18-t21-mu*(t6+t12+3.0*t18+t14+t16-1.0);
}

void STVK::computeStresses(TET& tet)
{
  MATRIX3 F = tet.F();
  const VEC3F* areaVecs = tet.b();
  _pf_pF.setZero();

  const double lam = _lambda;
  const double mu = _mu;
  
  const double f00 = F(0,0);
  const double f01 = F(0,1);
  const double f02 = F(0,2);
  const double f10 = F(1,0);
  const double f11 = F(1,1);
  const double f12 = F(1,2);
  const double f20 = F(2,0);
  const double f21 = F(2,1);
  const double f22 = F(2,2);

  const double b00 = areaVecs[0][0];
  const double b01 = areaVecs[0][1];
  const double b02 = areaVecs[0][2];
  const double b10 = areaVecs[1][0];
  const double b11 = areaVecs[1][1];
  const double b12 = areaVecs[1][2];
  const double b20 = areaVecs[2][0];
  const double b21 = areaVecs[2][1];
  const double b22 = areaVecs[2][2];
  const double b30 = areaVecs[3][0];
  const double b31 = areaVecs[3][1];
  const double b32 = areaVecs[3][2];

  const double t1 = f00*f00;
  const double t3 = f10*f10;
  const double t5 = f20*f20;
  const double t7 = f01*f01;
  const double t9 = f11*f11;
  const double t11 = f21*f21;
  const double t13 = f02*f02;
  const double t15 = f12*f12;
  const double t17 = f22*f22;
  const double t20 = lam*(t1/2.0+t3/2.0+t5/2.0-3.0/2.0+t7/2.0+t9/2.0+t11/2.0+t13/2.0+t15/2.0+t17/2.0);
  const double t23 = mu*(t1+t3+t5-1.0);
  const double t24 = lam*f00;
  const double t25 = mu*f00;
  const double t27 = t24+2.0*t25;
  const double t29 = t7*mu;
  const double t30 = t13*mu;
  const double t31 = t20+t23+f00*t27+t29+t30;
  const double t38 = mu*(f00*f01+f10*f11+f20*f21);
  const double t40 = lam*f01;
  const double t42 = t38+t25*f01+t40*f00;
  const double t49 = mu*(f00*f02+f10*f12+f20*f22);
  const double t51 = lam*f02;
  const double t53 = t49+t25*f02+t51*f00;
  const double t56 = lam*f10;
  const double t57 = mu*f10;
  const double t59 = t56+2.0*t57;
  const double t61 = mu*f01;
  const double t62 = t61*f11;
  const double t63 = mu*f02;
  const double t64 = t63*f12;
  const double t65 = f00*t59+t62+t64;
  const double t69 = t25*f11+t40*f10;
  const double t73 = t25*f12+t51*f10;
  const double t77 = mu*f20;
  const double t79 = lam*f20+2.0*t77;
  const double t81 = t61*f21;
  const double t82 = t63*f22;
  const double t83 = f00*t79+t81+t82;
  const double t87 = t25*f21+t40*f20;
  const double t91 = t25*f22+t51*f20;
  const double t95 = t1*mu;
  const double t98 = mu*(t7+t9+t11-1.0);
  const double t100 = t40+2.0*t61;
  const double t102 = t95+t20+t98+f01*t100+t30;
  const double t109 = mu*(f01*f02+f11*f12+f21*f22);
  const double t112 = t109+t61*f02+t51*f01;
  const double t117 = t24*f11+t61*f10;
  const double t119 = t25*f10;
  const double t120 = lam*f11;
  const double t121 = mu*f11;
  const double t123 = t120+2.0*t121;
  const double t125 = t119+f01*t123+t64;
  const double t129 = t61*f12+t51*f11;
  const double t134 = t24*f21+t61*f20;
  const double t136 = t25*f20;
  const double t137 = lam*f21;
  const double t138 = mu*f21;
  const double t140 = t137+2.0*t138;
  const double t142 = t136+f01*t140+t82;
  const double t146 = t61*f22+t51*f21;
  const double t153 = mu*(t13+t15+t17-1.0);
  const double t155 = t51+2.0*t63;
  const double t157 = t95+t29+t20+t153+f02*t155;
  const double t162 = t24*f12+t63*f10;
  const double t166 = t40*f12+t63*f11;
  const double t168 = lam*f12;
  const double t169 = mu*f12;
  const double t171 = t168+2.0*t169;
  const double t173 = t119+t62+f02*t171;
  const double t178 = t24*f22+t63*f20;
  const double t182 = t40*f22+t63*f21;
  const double t184 = lam*f22;
  const double t187 = t184+2.0*mu*f22;
  const double t189 = t136+t81+f02*t187;
  const double t193 = f10*t27+t62+t64;
  const double t199 = t9*mu;
  const double t200 = t15*mu;
  const double t201 = t20+t23+f10*t59+t199+t200;
  const double t205 = t38+t57*f11+t120*f10;
  const double t209 = t49+t57*f12+t168*f10;
  const double t213 = t121*f21;
  const double t214 = t169*f22;
  const double t215 = f10*t79+t213+t214;
  const double t219 = t57*f21+t120*f20;
  const double t223 = t57*f22+t168*f20;
  const double t228 = t119+f11*t100+t64;
  const double t233 = t3*mu;
  const double t235 = t233+t20+t98+f11*t123+t200;
  const double t239 = t109+t121*f12+t168*f11;
  const double t244 = t56*f21+t121*f20;
  const double t246 = t57*f20;
  const double t248 = t246+f11*t140+t214;
  const double t252 = t121*f22+t168*f21;
  const double t258 = t119+t62+f12*t155;
  const double t264 = t233+t199+t20+t153+f12*t171;
  const double t269 = t56*f22+t169*f20;
  const double t273 = t120*f22+t169*f21;
  const double t276 = t246+t213+f12*t187;
  const double t280 = f20*t27+t81+t82;
  const double t286 = f20*t59+t213+t214;
  const double t292 = t11*mu;
  const double t293 = t17*mu;
  const double t294 = t20+t23+f20*t79+t292+t293;
  const double t298 = t38+t77*f21+t137*f20;
  const double t302 = t49+t77*f22+t184*f20;
  const double t307 = t136+f21*t100+t82;
  const double t313 = t246+f21*t123+t214;
  const double t318 = t5*mu;
  const double t320 = t318+t20+t98+f21*t140+t293;
  const double t324 = t109+t138*f22+t184*f21;
  const double t330 = t136+t81+f22*t155;
  const double t336 = t246+t213+f22*t171;
  const double t342 = t318+t292+t20+t153+f22*t187;
  _pf_pF(0,0) = t31*b00+t42*b01+t53*b02;
  _pf_pF(0,1) = t65*b00+t69*b01+t73*b02;
  _pf_pF(0,2) = t83*b00+t87*b01+t91*b02;
  _pf_pF(0,3) = t42*b00+t102*b01+t112*b02;
  _pf_pF(0,4) = t117*b00+t125*b01+t129*b02;
  _pf_pF(0,5) = t134*b00+t142*b01+t146*b02;
  _pf_pF(0,6) = t53*b00+t112*b01+t157*b02;
  _pf_pF(0,7) = t162*b00+t166*b01+t173*b02;
  _pf_pF(0,8) = t178*b00+t182*b01+t189*b02;
  _pf_pF(1,0) = t193*b00+t117*b01+t162*b02;
  _pf_pF(1,1) = t201*b00+t205*b01+t209*b02;
  _pf_pF(1,2) = t215*b00+t219*b01+t223*b02;
  _pf_pF(1,3) = t69*b00+t228*b01+t166*b02;
  _pf_pF(1,4) = t205*b00+t235*b01+t239*b02;
  _pf_pF(1,5) = t244*b00+t248*b01+t252*b02;
  _pf_pF(1,6) = t73*b00+t129*b01+t258*b02;
  _pf_pF(1,7) = t209*b00+t239*b01+t264*b02;
  _pf_pF(1,8) = t269*b00+t273*b01+t276*b02;
  _pf_pF(2,0) = t280*b00+t134*b01+t178*b02;
  _pf_pF(2,1) = t286*b00+t244*b01+t269*b02;
  _pf_pF(2,2) = t294*b00+t298*b01+t302*b02;
  _pf_pF(2,3) = t87*b00+t307*b01+t182*b02;
  _pf_pF(2,4) = t219*b00+t313*b01+t273*b02;
  _pf_pF(2,5) = t298*b00+t320*b01+t324*b02;
  _pf_pF(2,6) = t91*b00+t146*b01+t330*b02;
  _pf_pF(2,7) = t223*b00+t252*b01+t336*b02;
  _pf_pF(2,8) = t302*b00+t324*b01+t342*b02;
  _pf_pF(3,0) = t31*b10+t42*b11+t53*b12;
  _pf_pF(3,1) = t65*b10+t69*b11+t73*b12;
  _pf_pF(3,2) = t83*b10+t87*b11+t91*b12;
  _pf_pF(3,3) = t42*b10+t102*b11+t112*b12;
  _pf_pF(3,4) = t117*b10+t125*b11+t129*b12;
  _pf_pF(3,5) = t134*b10+t142*b11+t146*b12;
  _pf_pF(3,6) = t53*b10+t112*b11+t157*b12;
  _pf_pF(3,7) = t162*b10+t166*b11+t173*b12;
  _pf_pF(3,8) = t178*b10+t182*b11+t189*b12;
  _pf_pF(4,0) = t193*b10+t117*b11+t162*b12;
  _pf_pF(4,1) = t201*b10+t205*b11+t209*b12;
  _pf_pF(4,2) = t215*b10+t219*b11+t223*b12;
  _pf_pF(4,3) = t69*b10+t228*b11+t166*b12;
  _pf_pF(4,4) = t205*b10+t235*b11+t239*b12;
  _pf_pF(4,5) = t244*b10+t248*b11+t252*b12;
  _pf_pF(4,6) = t73*b10+t129*b11+t258*b12;
  _pf_pF(4,7) = t209*b10+t239*b11+t264*b12;
  _pf_pF(4,8) = t269*b10+t273*b11+t276*b12;
  _pf_pF(5,0) = t280*b10+t134*b11+t178*b12;
  _pf_pF(5,1) = t286*b10+t244*b11+t269*b12;
  _pf_pF(5,2) = t294*b10+t298*b11+t302*b12;
  _pf_pF(5,3) = t87*b10+t307*b11+t182*b12;
  _pf_pF(5,4) = t219*b10+t313*b11+t273*b12;
  _pf_pF(5,5) = t298*b10+t320*b11+t324*b12;
  _pf_pF(5,6) = t91*b10+t146*b11+t330*b12;
  _pf_pF(5,7) = t223*b10+t252*b11+t336*b12;
  _pf_pF(5,8) = t302*b10+t324*b11+t342*b12;
  _pf_pF(6,0) = t31*b20+t42*b21+t53*b22;
  _pf_pF(6,1) = t65*b20+t69*b21+t73*b22;
  _pf_pF(6,2) = t83*b20+t87*b21+t91*b22;
  _pf_pF(6,3) = t42*b20+t102*b21+t112*b22;
  _pf_pF(6,4) = t117*b20+t125*b21+t129*b22;
  _pf_pF(6,5) = t134*b20+t142*b21+t146*b22;
  _pf_pF(6,6) = t53*b20+t112*b21+t157*b22;
  _pf_pF(6,7) = t162*b20+t166*b21+t173*b22;
  _pf_pF(6,8) = t178*b20+t182*b21+t189*b22;
  _pf_pF(7,0) = t193*b20+t117*b21+t162*b22;
  _pf_pF(7,1) = t201*b20+t205*b21+t209*b22;
  _pf_pF(7,2) = t215*b20+t219*b21+t223*b22;
  _pf_pF(7,3) = t69*b20+t228*b21+t166*b22;
  _pf_pF(7,4) = t205*b20+t235*b21+t239*b22;
  _pf_pF(7,5) = t244*b20+t248*b21+t252*b22;
  _pf_pF(7,6) = t73*b20+t129*b21+t258*b22;
  _pf_pF(7,7) = t209*b20+t239*b21+t264*b22;
  _pf_pF(7,8) = t269*b20+t273*b21+t276*b22;
  _pf_pF(8,0) = t280*b20+t134*b21+t178*b22;
  _pf_pF(8,1) = t286*b20+t244*b21+t269*b22;
  _pf_pF(8,2) = t294*b20+t298*b21+t302*b22;
  _pf_pF(8,3) = t87*b20+t307*b21+t182*b22;
  _pf_pF(8,4) = t219*b20+t313*b21+t273*b22;
  _pf_pF(8,5) = t298*b20+t320*b21+t324*b22;
  _pf_pF(8,6) = t91*b20+t146*b21+t330*b22;
  _pf_pF(8,7) = t223*b20+t252*b21+t336*b22;
  _pf_pF(8,8) = t302*b20+t324*b21+t342*b22;
  _pf_pF(9,0) = t31*b30+t42*b31+t53*b32;
  _pf_pF(9,1) = t65*b30+t69*b31+t73*b32;
  _pf_pF(9,2) = t83*b30+t87*b31+t91*b32;
  _pf_pF(9,3) = t42*b30+t102*b31+t112*b32;
  _pf_pF(9,4) = t117*b30+t125*b31+t129*b32;
  _pf_pF(9,5) = t134*b30+t142*b31+t146*b32;
  _pf_pF(9,6) = t53*b30+t112*b31+t157*b32;
  _pf_pF(9,7) = t162*b30+t166*b31+t173*b32;
  _pf_pF(9,8) = t178*b30+t182*b31+t189*b32;
  _pf_pF(10,0) = t193*b30+t117*b31+t162*b32;
  _pf_pF(10,1) = t201*b30+t205*b31+t209*b32;
  _pf_pF(10,2) = t215*b30+t219*b31+t223*b32;
  _pf_pF(10,3) = t69*b30+t228*b31+t166*b32;
  _pf_pF(10,4) = t205*b30+t235*b31+t239*b32;
  _pf_pF(10,5) = t244*b30+t248*b31+t252*b32;
  _pf_pF(10,6) = t73*b30+t129*b31+t258*b32;
  _pf_pF(10,7) = t209*b30+t239*b31+t264*b32;
  _pf_pF(10,8) = t269*b30+t273*b31+t276*b32;
  _pf_pF(11,0) = t280*b30+t134*b31+t178*b32;
  _pf_pF(11,1) = t286*b30+t244*b31+t269*b32;
  _pf_pF(11,2) = t294*b30+t298*b31+t302*b32;
  _pf_pF(11,3) = t87*b30+t307*b31+t182*b32;
  _pf_pF(11,4) = t219*b30+t313*b31+t273*b32;
  _pf_pF(11,5) = t298*b30+t320*b31+t324*b32;
  _pf_pF(11,6) = t91*b30+t146*b31+t330*b32;
  _pf_pF(11,7) = t223*b30+t252*b31+t336*b32;
  _pf_pF(11,8) = t302*b30+t324*b31+t342*b32;
}

